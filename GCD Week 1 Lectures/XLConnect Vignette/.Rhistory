library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\Data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
# install.packages("xlsx")
library(xlsx)
# if rJava error occurs, the Windows PATH variable needs
# to be pointed to the right jvm.dll file from the JRE.
# Usually in something like C:\Program Files\Java\jre1.8.0_31\bin\server\
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\Data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\Data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
# install.packages("xlsx")
library(xlsx)
# if rJava error occurs, the Windows PATH variable needs
# to be pointed to the right jvm.dll file from the JRE.
# Usually in something like C:\Program Files\Java\jre1.8.0_31\bin\server\
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\Data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\Data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# install.packages("xlsx")
library(xlsx)
# if rJava error occurs, the Windows PATH variable needs
# to be pointed to the right jvm.dll file from the JRE.
# Usually in something like C:\Program Files\Java\jre1.8.0_31\bin\server\
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
setwd("~/R Studio/Projects/Downloading from Excel Example")
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
# install.packages("xlsx")
library(xlsx)
# if rJava error occurs, the Windows PATH variable needs
# to be pointed to the right jvm.dll file from the JRE.
# Usually in something like C:\Program Files\Java\jre1.8.0_31\bin\server\
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
colIndex <- 2:3
rowIndex <- 1:4
# install.packages("xlsx")
library(xlsx)
# if rJava error occurs, the Windows PATH variable needs
# to be pointed to the right jvm.dll file from the JRE.
# Usually in something like C:\Program Files\Java\jre1.8.0_31\bin\server\
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
colIndex <- 2:3
rowIndex <- 1:4
cameraDataSubset <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1,
colIndex=colIndex,rowIndex=rowIndex)
cameraDataSubset
setwd("~/R Studio/Projects/XLConnect Vignette")
install.packages("XLConnect")
library(XLConnect)
vignette("XLConnect")
vignette("XLConnect")
help(XLConnect)
getwd()
?setStyleAction
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
wb <- loadWorkbook("XLConnectExample1.xlsx", create=T)
createSheet(wb, name="chickSheet")
writeWorksheet(wb, ChickWeight, sheet="chickSheet", startRow=3,
startCol=4)
saveWorkbook(wb)
ls()
rm(list=ls())
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
wb <- loadWorkbook("XLConnectExample1.xlsx", create=T)
createSheet(wb, name="chickSheet")
writeWorksheet(wb, ChickWeight, sheet="chickSheet", startRow=3,
startCol=4)
saveWorkbook(wb)
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
writeWorksheetToFile("XLConnectExample2.xlsx", data=ChickWeight,
sheet="chickSheet", startRow=3, startCol=4)
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
wb = loadWorkbook("XLConnectExample1.xlsx", create=T)
createSheet(wb, name="chickSheet")
writeWorksheet(wb, ChickWeight, sheet="chickSheet", startRow=3,
startCol=4)
saveWorkbook(wb)
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
wb = loadWorkbook("XLConnectExample1.xlsx", create=T)
createSheet(wb, name="chickSheet")
writeWorksheet(wb, ChickWeight, sheet="chickSheet", startRow=3,
startCol=4)
saveWorkbook(wb)
# Write the ChickWeight dataset into a new Excel workbook.
require(XLConnect)
wb <- loadWorkbook("XLConnectExample1.xlsx", create=T)
createSheet(wb, name="chickSheet")
writeWorksheet(wb, ChickWeight, sheet="chickSheet", startRow=3,
startCol=4)
saveWorkbook(wb)
rm(wb)
# Write the Women dataset into a named range in a new Excel workbook.
require(XLConnect)
wb <- loadWorkbook("XLConnectExample3.xlsx", create=T)
createSheet(wb, name="womenData")
createName(wb, name="womenName", formula="womenData!$C$5", overwrite=T)
writeNamedRegion(wb, women, name="womenName")
saveWorkbook
# Write the Women dataset into a named range in a new Excel workbook.
require(XLConnect)
wb <- loadWorkbook("XLConnectExample3.xlsx", create=T)
createSheet(wb, name="womenData")
createName(wb, name="womenName", formula="womenData!$C$5", overwrite=T)
writeNamedRegion(wb, women, name="womenName")
saveWorkbook(wb)
writeNamedRegionToFile
formula="womenData!$C$5")
# Write the Women dataset into a named range in a new Excel workbook.
require(XLConnect)
writeNamedRegionToFile("XLConnectExample4.xlsx", women, name="womenName",
formula="womenData!$C$5")
data
# Read from XLConnectExample1.xlsx (created by XLConnectExample1.R)
require(XLConnect)
wb <- loadWorkbook("XLConnectExample1.xlsx", create=T)
data <- readWorksheet(wb, sheet="chickSheet", startRow=0, endRow=10,
startCol=0, endCol=0)
data
# Read from XLConnectExample1.xlsx (created by XLConnectExample1.R) in one call
require(XLConnect)
data <- readWorksheetFromFile("XLConnectExample1.xlsx", sheet="chickSheet",
startRow=0, endRow=10, startCol=0, endCol=0)
data
rm(list=ls())
# Read from the named range 'womenName' in XLConnectExample3.xlsx (created by
# XLConnectExample3.R)
require(XLConnect)
wb <- loadWorkbook("XLConnectExample3.xlsx", create=T)
data <- readNamedRegion(wb, name="womenName")
data
# Read from the named range 'womenName' in XLConnectExample3.xlsx (created by
# XLConnectExample3.R) in one call
require(XLConnect)
data <- readNamedRegionFromFile("XLConnectExample4.xlsx", "womenName")
data
install.packages(c("XLConnect", "zoo", "ggplot2"))
install.packages(c("XLConnect", "zoo", "ggplot2"))
?paste
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
?seq
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLS$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLS$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
?createCellStyle
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLS$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLS$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
