cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLC$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Part 3
wb <- loadWorkbook(wbFilename)
# Stack currencies into a currency variable (for use with ggplot2 below)
currencies <- names(curr)[-1]
gcurr <- reshape(curr, varying=currencies, direction="long",
v.names="Value", times=currencies, timevar="Currency")
# Create a png graph showing the currencies in the context
# of the Swiss Franc
png(filename="swiss_franc.png", width=800, height=600)
p <- ggplot(gcurr, aes(Date, Value, colour=Currency)) +
geom_line() + stat_smooth(method="loess") +
scale_y_continuous("Exchange Rate CHF/CUR") +
labs(title=paste0("CHF vs ", paste(currencies, collapse=", ")),
x="") +
theme(axis.title.y=element_text(size=10, angle=90, vjust=0.3))
print(p)
dev.off()
# Define where the image should be placed via a named region;
# let's put the image two columns left of the data starting
# in the 5th row
createName(wb, name="graph",
formula=paste(sheet, idx2cref(c(5, ncol(curr) + 2)), sep="!"))
# Note: idx2cref converts indices (row, col) to Excel cell references
# Put the image created above at the corresponding location
addImafge(wb, filename="swiss_franc.png", name="graph",
originalSize=T)
saveWorkbook(wb)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLC$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Part 3
wb <- loadWorkbook(wbFilename)
# Stack currencies into a currency variable (for use with ggplot2 below)
currencies <- names(curr)[-1]
gcurr <- reshape(curr, varying=currencies, direction="long",
v.names="Value", times=currencies, timevar="Currency")
# Create a png graph showing the currencies in the context
# of the Swiss Franc
png(filename="swiss_franc.png", width=800, height=600)
p <- ggplot(gcurr, aes(Date, Value, colour=Currency)) +
geom_line() + stat_smooth(method="loess") +
scale_y_continuous("Exchange Rate CHF/CUR") +
labs(title=paste0("CHF vs ", paste(currencies, collapse=", ")),
x="") +
theme(axis.title.y=element_text(size=10, angle=90, vjust=0.3))
print(p)
dev.off()
# Define where the image should be placed via a named region;
# let's put the image two columns left of the data starting
# in the 5th row
createName(wb, name="graph",
formula=paste(sheet, idx2cref(c(5, ncol(curr) + 2)), sep="!"))
# Note: idx2cref converts indices (row, col) to Excel cell references
# Put the image created above at the corresponding location
addImage(wb, filename="swiss_franc.png", name="graph",
originalSize=T)
saveWorkbook(wb)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLC$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
# Part 3
wb <- loadWorkbook(wbFilename)
# Stack currencies into a currency variable (for use with ggplot2 below)
currencies <- names(curr)[-1]
gcurr <- reshape(curr, varying=currencies, direction="long",
v.names="Value", times=currencies, timevar="Currency")
# Create a png graph showing the currencies in the context
# of the Swiss Franc
png(filename="swiss_franc.png", width=800, height=600)
p <- ggplot(gcurr, aes(Date, Value, colour=Currency)) +
geom_line() + stat_smooth(method="loess") +
scale_y_continuous("Exchange Rate CHF/CUR") +
labs(title=paste0("CHF vs ", paste(currencies, collapse=", ")),
x="") +
theme(axis.title.y=element_text(size=10, angle=90, vjust=0.3))
print(p)
dev.off()
# Define where the image should be placed via a named region;
# let's put the image two columns left of the data starting
# in the 5th row
createName(wb, name="graph",
formula=paste(sheet, idx2cref(c(5, ncol(curr) + 2)), sep="!"))
# Note: idx2cref converts indices (row, col) to Excel cell references
# Put the image created above at the corresponding location
addImage(wb, filename="swiss_franc.png", name="graph",
originalSize=T)
saveWorkbook(wb)
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/Reading XML Examples")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
install.packages(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
class(rootNode)
rootNode[1]
rootNode[[1]
]
rootNode[[1]]
rootNode[1]
rootNode[[1]][[1]]
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode) # name of root element
names(rootNode) # name of all 1st children
rootNode[[1]] # first child of rootNode (and all decendents)
rootNode[[1]][[1]] # first child of the first child of the root node
xmlSApply(rootNode, xmlValue)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode) # name of root element
names(rootNode) # name of all 1st children
rootNode[[1]] # first child of rootNode (and all decendents)
rootNode[[1]][[1]] # first child of the first child of the root node
xmlSApply(rootNode, xmlValue) # The values, concatenated, of all descendents
# of rootNode
# XPath further reading:
# http://www.stat.berkeley.edu/~statcur/Workshop2/Presentations/XML.pdf
# gets the values of all "name" nodes, regardless of location
xpathSApply(rootNode, "//name", xmlValue)
# gets the values of all "price" nodes, regardless of location
xpathSApply(rootNode, "//price", xmlValue)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=T)
rootNode <- xmlRoot(doc)
xmlName(rootNode) # name of root element
names(rootNode) # name of all 1st children
rootNode[[1]] # first child of rootNode (and all decendents)
rootNode[[1]][[1]] # first child of the first child of the root node
xmlSApply(rootNode, xmlValue) # The values, concatenated, of all descendents
# of rootNode
# XPath further reading:
# http://www.stat.berkeley.edu/~statcur/Workshop2/Presentations/XML.pdf
# gets the values of all "name" nodes, regardless of location
xpathSApply(rootNode, "//name", xmlValue)
# gets the values of all "price" nodes, regardless of location
xpathSApply(rootNode, "//price", xmlValue)
# Extract content by attributes
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=T)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/Reading JSON Examples")
library(jsonlite)
require(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
require(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
require(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
require(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=T)
cat(myjson)
require(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=T)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/data.table examples")
require(data.table)
DF <- data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF, 3)
DT <- data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT, 3)
install.packages("data.table")
require(data.table)
DF <- data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF, 3)
DT <- data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT, 3)
require(data.table)
DF <- data.frame(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DF, 3)
DT <- data.table(x=rnorm(9), y=rep(c("a","b","c"), each=3), z=rnorm(9))
head(DT, 3)
tables() # all tables in memory
DT[2,]
DT[DT$y=="a",]
DT[c(2, 3)]
DT[,c(2, 3)]
{
x <- 1
y <- 2
}
k <- {print(10); 5}
print(k)
DT[,list(mean(x), sum(z))]
DT[,table(y)]
DT[,w:=z^2] # Adding new columns
DT
DT2 <- DT
DT[, y:=2]
head(DT)
head(DT2)
DT[,m:={tmp <- (x + z); log2(tmp + 5)}]
DT
DT[,a:=x>0]
DT
DT[,b:=mean(x + w), by=a]
DT
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, T))
DT[, .N, by=x]
DT
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, T))
DT[, .N, by=x]
DT
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, T))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
setkey(DT, x)
DT['a']
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
setkey(DT, x)
DT["a"]
DT1 <- data.table(x=c("a", "a", "b", "dt1"), y=1:4)
DT2 <- data.table(x=c("a", "b", "dt2"), z=5:7)
setkey(DT1, x); setkey(DT2, x)
merge(DT1, DT2)
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names=F, col.names=T, sem="\t", quote=F)
system.time(fread(file))
system.time(read.table(file, header=T, sep="\t"))
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names=F, col.names=T, sep="\t", quote=F)
system.time(fread(file))
system.time(read.table(file, header=T, sep="\t"))
