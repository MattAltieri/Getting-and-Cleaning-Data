library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 /
0
Inf - Inf
my_vector <- 1:20
my_vector
dim(my_vector)
quit()
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
sapply(x, mean)
class(sapply(x, mean))
summary(class(sapply(x, mean)))
summary(sapply(x, mean))
str(sapply(x, mean))
unclass(sapply(x, mean))
is.data.frame(sapply(x, mean))
is.list(sapply(x, mean))
is.matrix(sapply(x, mean))
is.vector(sapply(x, mean))
dim(sapply(x, mean))
names(sapply(x, mean))
x <- list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
?runif
lapply(x, runif, min=0, max=10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3, 2))
x
lapply(x, function(elt), elt[, 1])
lapply(x, function(elt) elt[, 1])
lapply(x, function(elem) elem[, 1])
sapply(x, function(elem) elem[, 1])
typeof(lapply(x, function(elem) elem[, 1]))
x <- list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
lapply(x, mean)
typeof(lapply(x, mean))
sapply(x, mean)
typeof(sapply(x, mean))
class(lapply(x, mean))
str(apply)
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x, 1, sum)
?sum
?rowSums
rowSums(x)
rowMeans(x)
colSums(x)
colMeans(x)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs=c(0.25, 0.75)
)
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims=2)
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
?gl
f
tapply(x, f, mean)
tapply(x, f, mean, simplify=F)
tapply(x, f, range)
split(x, f)
lapply(split(x, f), mean)
sapply(split(x, f), mean)
library(datasets)
head(airquality)
str(airquality)
summary(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, ("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=T))
x <- rnorm(10)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
?interaction
str(split(x, list(f1, f2)))
x
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage
x
printmessage(x)
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#     invisible(x)
}
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x
#     invisible(x)
}
printmessage(x[1])
printmessage <- function(x) {
if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
x
invisible(x)
}
printmessage(x[1])
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
pringmessage2(x)
printmessage2(x)
mean(x)
traceback()
lm(y - x)
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
debug(lm)
lm(y ~ x)
debug(match)
stop
exit
stop
?
help
quit
options(error = recover)
read.csv("nosuchfile")
undebug(match)
options(error = recover)
read.csv("nosuchfile")
read.csv("nosuchfile")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, dest = ".\\Data\\cameras.csv")
list.files(".\\data")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = ".\\Data\\cameras.csv")
list.files(".\\data")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = ".\\Data\\cameras.csv")
list.files(".\\data")
dateDownloaded <- date()
dateDownloaded
if (!file.exists(".\\data")) {
dir.create(".\\data")
}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = ".\\Data\\cameras.csv")
list.files(".\\data")
dateDownloaded <- date()
cameraData <- read.table(".\\data\cameras.csv")
head(cameraData)
cameraData <- read.table(".\\data\cameras.csv", sep = ",", header = T)
cameraData <- read.table(".\\data\\cameras.csv", sep = ",", header = T)
head(cameraData)
cameraData <- read.csv(".\\data\\camera.csv")
cameraData <- read.csv(".\\data\\cameras.csv")
head(cameraData)
View(cameraData)
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile = ".\\Data\\cameras.xlsx")
dateDownloaded <- date()
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
if (!file.exists(".\\data")) { dir.create(".\\data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl, destfile=".\\Data\\cameras.xlsx", mode="wb")
dateDownloaded <- date()
cameraData <- read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, header=T)
head(cameraData)
# Generate an Excel report which compares exchange rates (CHF vs EUR, USD, GBP)
require(XLConnect)
require(zoo)
require(ggplot2) # >= 0.9.3
# Read in (historical) currency data
# For this example take sample data set 'swissfranc' from XLConnect
curr <- XLConnect::swissfranc
curr <- curr[order(curr$Date),]
# Part 1
# Workbook filename
wbFilename <- "swiss_franc.xlsx"
# Create a new workbook
wb <- loadWorkbook(wbFilename, create=T)
# Create a new sheet named 'Swiss_Fran'
sheet <- "Swiss_Franc"
createSheet(wb, name=sheet)
# Create a new Excel name referring to the top left corner
# of the sheet 'Swiss_Franc' - this name is going to hold
# our currency data
dataName <- "currency"
nameLocation <- paste(sheet, "$A$1", sep="!")
createName(wb, name=dataName, formula=nameLocation)
# Instruct XLConnect to only apply a data format for a cell
# but not to apply any other cell styling
setStyleAction(wb, XLC$"STYLE_ACTION.DATA_FORMAT_ONLY")
# Set the default format for numeric data to display
# four digits after the decimal point
setDataFormatForType(wb, type=XLC$"DATA_TYPE.NUMERIC", format="0.0000")
# Write the currency data to the named region created above
# Note: the named region will be automatically redefined to encompass all
# written data
writeNamedRegion(wb, data=curr, name=dataName, header=T)
# Save the workbook (this actually writes the file to disk)
saveWorkbook(wb)
# Part 2
# Load the workbook created above
wb <- loadWorkbook(wbFilename)
# Create a cell style for the header row
csHeader <- createCellStyle(wb, name="header")
setFillPattern(csHeader, fill=XLC$FILL.SOLID_FOREGROUND)
setFillForegroundColor(csHeader, color=XLC$COLOR.GREY_25_PERCENT)
# Create a date cell style with a custom format for the Date column
csDate <- createCellStyle(wb, name="date")
setDataFormat(csDate, format="yyyy-mm-dd")
# Create a highlighting cell style
csHlight <- createCellStyle(wb, name="highlight")
setFillPattern(csHlight, fill=XLC$SOLID_FOREGROUND)
setFillForegroundColor(csHlight, color=XLS$COLOR.CORNFLOWER_BLUE)
# Apply header cell style to the header row
setCellStyle(wb, sheet=sheet, row=1, col=seq(length.out=ncol(curr)),
cellstyle=csHeader)
# Index for all rows except header row
allRows <- seq(length=nrow(curr)) + 1
# Apply date cell style to the Date column
setCellStyle(wb, sheet=sheet, row=allRows, col=1, cellstyle=csDate)
# Set column width such that the full date column is visible
setColumnWidth(wb, sheet=sheet, column=1, width=2800)
# Check if there was a change of more than 2 % compared
# to the previous day (per currency)
idx <- rollapply(curr[, -1], width=2,
FUN=function(x) abs(x[2] / x[1] - 1),
by.column=T) > 0.02
idx <- rbind(rep(F, ncol(idx)), idx)
widx <- lapply(as.data.frame(idx), which)
# Apply highlighting cell style
for(i in seq(along=widx)) {
if(length(widx[[i]]) > 0) {
setCellStyle(wb, sheet=sheet, row=widx[[i]] + 1, col=i+1,
cellstyle=csHlight)
}
# Note:
# +1 for row since there is a header row
# +1 for column since the first column is the time column
}
saveWorkbook(wb)
x <- rnorm(100)
hist(x)
# Simulate some data and plot a histogram
x <- rnorm(100)
hist(x)
# Generate some more data and plot a scatterplot
y <- rnorm(100)
plot(x, y)
z <- rnorm(100)
plot(x, z)
par(mar=c(2, 2, 2, 2))
plot(x, y)
par(mar=c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch=20)
plot(x, y, pch=19)
plot(x, y, pch=2)
plot(x, y, pch=3)
plot(x, y, pch=4)
plot(x, y, pch=4)
example(points)
example(points)
pchShow(c("o","O","0"), cex = 2.5) # for the list of points
pchShow(NULL, cex = 4, cextext = 0, main = NULL)
pchShow(c("o","O","0"), cex = 3) # for the list of points
pchShow(c("o","O","0"), cex = 2.5) # for the list of points
pchShow(c("o","O","0"), cex = 2.5) # for the list of points
pchShow(c("o","O","0"), cex = 1.5) # for the list of points
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch=20)
title("Scatterplot")
## Add some text
text(-2, -2, "Label")
text(2, -2, "Label")
text(-2, -2, "Label")
legend("topleft", legend="Data", pch=20)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch=20)
## Add a title
title("Scatterplot")
## Add some text
text(-2, -2, "Label")
## Add a legend
legend("topleft", legend="Data", pch=20)
## Plot a line (from linear model)
fit <- lm(y ~ x)
abline(fit)
## Adjust thickness of line
abline(fit, lwd=3)
## Change the line color
abline(fit, lwd=3, col="blue")
plot(x, y, xlab="Weight", ylab="Height", main="Scatterplot", pch=20)
legent("topright", legend="Data")
legend("topright", legend="Data")
legend("topright", legend="Data", pch=20)
fit <- lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100, 2)
## z vs x and y vs x on the same canvas
par(mfrow=c(2, 1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par("mar")
par(mar=c(2, 2, 1, 1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow=c(1, 2))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mar=c(4, 4, 2, 2))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow=c(2, 2))
plot(x, y)
par(mfrow=c(2, 2))
plot(x, y) # upper left
plot(x, z) # upper right
plot(z, x) # lower left
plot(y, x) # lower right
par(mfcol=c(2, 2))
plot(x, y) # upper left
plot(x, z) # lower left
plot(z, x) # upper right
plot(y, x) # lower right
par(mfrow=x(1, 1))
par(mfrow=c(1, 1))
par(mfrow=c(1, 1))
### Generate some data
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50, labels=c("Male", "Female")
g <- gl(2, 50, labels=c("Male", "Female"))
g <- gl(2, 50, labels=c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type="n")
points(x[g == "Male"], y[g == "Male"])
points(x[g == "Male"], y[g == "Male"], col="green")
points(x[g == "Female"], y[g == "Female"], col="blue")
points(x[g == "Female"], y[g == "Female"], col="blue", pch=19)
setwd("~/R Studio/Projects/Getting and Cleaning Data/GCD Week 1 Lectures/jsonlite vignette")
require(jsonlite)
